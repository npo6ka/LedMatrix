#include "mouse.h"

Mouse::Mouse()
{
}

void Mouse::on_init()
{
    set_fps(30);
    x = 0;
}

#define W 12
#define H 10

static uint32_t mouse1[W*H] PROGMEM = {
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00ffff, 0x00ffff, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x00ffff, 0x000000, 0x000000,
    0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
    0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000,
    0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x400000,
    0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000,
};

static uint32_t mouse2[W*H] PROGMEM = {
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00ffff, 0x00ffff, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x00ffff, 0x000000, 0x000000,
    0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
    0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000,
    0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x400000,
    0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
    0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000,
};

static void drawSprite(int x, int y, uint32_t *spr)
{
    for (int i = 0 ; i < W ; ++i)
    {
        for (int j = 0 ; j < H ; ++j)
        {
            int v = pgm_read_dword(spr + i + j * W);
            if (y + j >= 0 && y + j < HEIGHT && x + i >= 0 && x + i < WIDTH) {
                setPixColor(y + j, x + i, CRGB(v));
            }
        }
    }
}

void Mouse::on_update()
{
    fader(255);
    x = (x + 1) % WIDTH;
    drawSprite(x, 0, x % 2 ? mouse1 : mouse2);
    drawSprite(x - WIDTH, 0, x % 2 ? mouse1 : mouse2);
}
